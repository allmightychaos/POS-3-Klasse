FUNCTION_BLOCK power

VAR_INPUT				
	speed : REAL;
	acceleration : REAL;
	distance : REAL;
END_VAR

VAR_OUTPUT				
	power : REAL;
END_VAR

FUZZIFY speed
	TERM tooSlow := (0, 1) (1, 1) (2, 0); 
	TERM slow := (1, 0) (2, 1) (3, 1) (4, 0);
	TERM optimum := (3, 0) (4, 1) (5, 1) (6, 0);
	TERM fast := (5, 0) (6, 1) (7, 1) (8, 0);
	TERM tooFast := (7, 0) (8, 1) (10, 1);
END_FUZZIFY

FUZZIFY acceleration
	TERM decelerating := (-2, 1) (-1, 1) (0, 0);
	TERM constant := (-1, 0) (0, 1) (1, 0);
	TERM accelerating := (0, 0) (1, 1) (2, 1);
END_FUZZIFY

FUZZIFY distance
	TERM veryClose := (0, 1) (20, 0);
	TERM close := (0, 0) (20, 1) (30, 1) (50, 0);
	TERM distant := (30, 0) (50, 1) (100, 1);
END_FUZZIFY

DEFUZZIFY power
	TERM decreaseGreatly := (-5,0) (-3.5,1) (-2,0);
	TERM decrease := (-3.25,0) (-1.75,1) (-0.25,0);
	TERM constant := (-1.5,0) (0,1) (1.5,0);
	TERM increase := (0.25,0) (1.75,1) (3.25,0);
	TERM increaseGreatly := (2,0) (3.5,1) (5,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
    AND : MIN;
    ACT : MIN;
    ACCU : MAX;

    // Increase power if too slow at a distance
    RULE 1 : IF distance IS distant AND speed IS tooSlow THEN power IS increaseGreatly;
    RULE 2 : IF distance IS distant AND speed IS slow THEN power IS increase;

    // Maintain constant power at optimum speed
    RULE 3 : IF distance IS distant AND speed IS optimum THEN power IS constant;
    RULE 4 : IF distance IS close AND speed IS optimum THEN power IS constant;

    // Gradual decrease in power as the car approaches the target
    RULE 5 : IF distance IS close AND speed IS fast THEN power IS decrease;
    RULE 6 : IF distance IS close AND speed IS tooFast THEN power IS decrease;
    RULE 7 : IF distance IS veryClose AND speed IS fast THEN power IS decrease;
    RULE 8 : IF distance IS veryClose AND speed IS tooFast THEN power IS decrease;

    // Fine control as the car gets very close
    RULE 9 : IF distance IS veryClose AND speed IS slow THEN power IS decrease;
    RULE 10: IF distance IS veryClose AND speed IS tooSlow THEN power IS decrease;
    RULE 11: IF distance IS close AND (speed IS slow OR speed IS tooSlow) THEN power IS constant;

    // Ensuring stopping within 0.5 to 1 meter
    RULE 12: IF distance IS veryClose AND (speed IS fast OR speed IS tooFast OR speed IS optimum) THEN power IS decreaseGreatly;
    RULE 13: IF distance IS veryClose AND (speed IS slow OR speed IS tooSlow) THEN power IS constant;
END_RULEBLOCK


END_FUNCTION_BLOCK